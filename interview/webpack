1、Entry(入口)
    可以使用多个键值对， 键为文件名，值为文件地址，打包多个文件


2、OutPut(输出)
    filename: 输出文件名， 默认main
    path: 输入路径
    多个文件 可以是用占位符， filename: [name].js,对应入口的多个文件
    publicPath: cdn地址，会自动添加前缀地址


3、loader
    loader让webpacck能够处理那些非js文件，webpack本身只理解js。loader可以将所有类型的文件
    转换为webpack可以处理的有效模块。
    在更高层面，在 webpack 的配置中 loader 有两个目标：
        test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。正则匹配
        use 属性，表示进行转换时，应该使用哪个 loader，对应的解析器
        多个loader加载顺序，从下向上、从右向左

4、插件(plugins)
    在webpack打包过程中的某个时间点， 去执行某件事情


webpack-dev-server  会把打包后的文件放在内存里

webpack 和 codesplitting（代码分割）
    代码分割与webpack无关
    两种方式：
        同步代码： 通过optimization配置 splitChunks
        异步代码： 不配置也可以，只需babel兼容动态引入语法即可。

Prefetching/Preloading
treeshaking  按需引入，按需部分打包
filename与chunkFileName不同：
    入口文件：filename
    间接引入：chunkFileName

MiniCssExtractPlugin: css代码分割， 针对production
optimize-css-assets-webpack-plugin：css代码压缩
pwa: serviceWork, 线上代码，如果服务器挂掉，依然可以看到原有页面
workboxPlugin.generateSW({
    clientsClaim: true,
    skipWaiting: true
})